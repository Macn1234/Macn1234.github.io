<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proyectos on Miguel Cortes</title>
    <link>https://macn1234.github.io/proyectos/</link>
    <description>Recent content in Proyectos on Miguel Cortes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Sep 2017 21:28:19 -0500</lastBuildDate>
    <atom:link href="https://macn1234.github.io/proyectos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Algoritmo de Bresenham</title>
      <link>https://macn1234.github.io/proyectos/algoritmo-bresenham/</link>
      <pubDate>Thu, 28 Sep 2017 21:28:19 -0500</pubDate>
      
      <guid>https://macn1234.github.io/proyectos/algoritmo-bresenham/</guid>
      <description>&lt;p&gt;El algoritmo de Bresenham es un algoritmo relativamente sencillo y muy útil cuando se habla de computación gráfica, pues básicamente es un método rápido para el trazado de líneas en dispositivos gráficos, cuya principal cualidad es que solo realiza cálculos con enteros lo cual hace que los cálculos se hagan de manera veloz y sencilla.&lt;/p&gt;

&lt;p&gt;Cuando pensamos en gráficos por computador, se debe entender que la pantalla es una gran matriz de pixeles, donde cada pixel puede tomar distintos valores en la escala RGB para representar un color dado. Si intentamos trazar una línea entre dos puntos (excepto para las líneas horizontales y verticales), siempre cortará los cuadrados por donde pasa, dividiendo al punto mínimo en dos áreas de diferente tamaño.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://macn1234.github.io/img/bresenham.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dado que una línea puede tocar varios pixeles, se puede elegir qué píxeles se va a marcar con la línea de acuerdo a diferentes criterios como por ejemplo podría iluminarse cada píxel que toca al trazarse la línea ideal o también aquellos píxeles que queden cortados por un determinado porcentaje del área de cada píxel.&lt;/p&gt;

&lt;p&gt;El algoritmo funciona asi :&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Si 0&amp;lt;|m|&amp;lt;1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se capturan los extremos de la línea y se almacena el extremo izquierdo en (x0,y0).&lt;/li&gt;
&lt;li&gt;Se carga (x0,y0) en el bufer de estructura (se traza el primer punto)&lt;/li&gt;
&lt;li&gt;Se calculan las constantes Δx,Δy, 2Δy y 2Δy-Δx y se obtiene el valor inicial para el parametro de decisión p0=2Δy-Δx.&lt;/li&gt;
&lt;li&gt;Para j=0 mientras j&amp;lt;Δx&lt;/li&gt;
&lt;li&gt;En cada xk a lo largo de la línea, que inicia en k=0 se efectúa la prueba siguiente:

&lt;ul&gt;
&lt;li&gt;Si pk&amp;lt;0

&lt;ul&gt;
&lt;li&gt;Trazamos (xk+1,yk).&lt;/li&gt;
&lt;li&gt;Asignamos pk+1= pk+2Δy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sino

&lt;ul&gt;
&lt;li&gt;Trazamos (xk+1,yk+1).&lt;/li&gt;
&lt;li&gt;Asignamos pk+1= pk+2Δy-2Δx.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Si |m|&amp;gt;1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recorremos la dirección en pasos unitarios y calculamos los valores sucesivos de x que se aproximen más a la trayectoria de la línea.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Dectector De Plagio en codigo fuente</title>
      <link>https://macn1234.github.io/proyectos/DectectorDePlagio/</link>
      <pubDate>Thu, 24 Aug 2017 21:28:19 -0500</pubDate>
      
      <guid>https://macn1234.github.io/proyectos/DectectorDePlagio/</guid>
      <description>&lt;p&gt;Este software se desarrollo la materia de Lenguajes de programación , Básicamente consiste en un comparador de códigos , el cual por diferentes algoritmos de comparación de strings y otras características que hay que tener en cuenta a la hora de analizar código, decía que porcentaje de similitud hay entre códigos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GIA UN</title>
      <link>https://macn1234.github.io/proyectos/GIAUN/</link>
      <pubDate>Thu, 24 Aug 2017 21:17:38 -0500</pubDate>
      
      <guid>https://macn1234.github.io/proyectos/GIAUN/</guid>
      <description>&lt;p&gt;GIA UN es una aplicación pensada para estudiantes, la cual básicamente consiste en armar grupos de estudio de acuerdo al tema de interés de los estudiantes. Esta aplicación se realizo para la materia Ingeniería de Sotfware I , usando el framework Django. En este desarrollo, los usuarios se registran por medio del correo institucional, y una vez registrados podrán crear grupos o unirse al que fuera de su interés. Ademas , en los grupos se pueden crear eventos y notas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>voiceCar</title>
      <link>https://macn1234.github.io/proyectos/voiceCar/</link>
      <pubDate>Thu, 24 Aug 2017 21:17:16 -0500</pubDate>
      
      <guid>https://macn1234.github.io/proyectos/voiceCar/</guid>
      <description>&lt;p&gt;Este proyecto fue realizado para la materia Teoria de la información , el proyecto consiste en un carro manejado por comandos de voz a travez de Bluetooth. Para este proyecto, se realizo todo el modulo de reconocimiento de voz y se uso una tarjeta programable texas para hacer el circuito del carro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://macn1234.github.io/img/voiceCar.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>